# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - development
  - master

pr:
  - master
  - development

resources:
- repo: self

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Main
  displayName: Main
  jobs:
  - job: tests
    displayName: tests
    pool:
      vmImage: $(vmImageName)
    steps:
     - task: DownloadSecureFile@1
       name: test
       inputs:
        secureFile: 'env-back-test'
     - task: Bash@3
       inputs:
         targetType: 'inline'
         script: 'mv $(test.secureFilePath) .env.test && npm i'

     - task: DockerCompose@0
       inputs:
         containerregistrytype: 'Container Registry'
         dockerComposeFile: 'docker/docker-compose.yaml'
         action: 'Run a Docker Compose command'
         dockerComposeCommand: 'up -d'
     - task: Bash@3
       inputs:
         targetType: 'inline'
         script: 'npm run test'
 
     - task: SonarCloudPrepare@1
       inputs:
         SonarCloud: 'sonar-v2'
         organization: 'ita-social-projects'
         scannerMode: 'CLI'
         configMode: 'file'
     - task: SonarCloudAnalyze@1

  - job: Build
    displayName: BuildandDeploy
    condition: in(variables['Build.Reason'], 'IndividualCI', 'Manual')  
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DownloadSecureFile@1
        name: envprod
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          secureFile: 'env-back'
      - task: Bash@3
        name: prodfile
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          targetType: 'inline'
          script: 'mv $(envprod.secureFilePath) .env'
      - task: DownloadSecureFile@1
        name: envdev
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          secureFile: 'env-back-staging'
      - task: Bash@3
        name: devfile
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          targetType: 'inline'
          script: 'mv $(envdev.secureFilePath) .env'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'cat .env'
      - task: Docker@0
        name: stagingBuild
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
         containerregistrytype: 'Azure Container Registry'
         azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
         azureContainerRegistry: '{"loginServer":"horondistaging.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/HorondiStaging"}'
         action: 'Build an image'
         dockerFile: '**/Dockerfile'
         imageName: '$(Build.Repository.Name):$(Build.BuildId)'
      - task: Docker@0
        name: deployedStaging
        displayName: 'Push an image'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
        inputs:
          azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
          azureContainerRegistry: '{"loginServer":"horondistaging.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/HorondiStaging"}'
          action: 'Push an image'
      - task: Docker@0
        name: productionBuild
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
         containerregistrytype: 'Azure Container Registry'
         azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
         azureContainerRegistry: '{"loginServer":"horondi.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/Horondi"}'
         action: 'Build an image'
         dockerFile: '**/Dockerfile'
         imageName: '$(Build.Repository.Name):$(Build.BuildId)'
      - task: Docker@0
        name: deployedProduction
        displayName: 'Push an image'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
          azureContainerRegistry: '{"loginServer":"horondi.azurecr.io", "id" : "/subscriptions/734fc759-c3a2-4e22-a478-301dc5b10496/resourceGroups/Horondi/providers/Microsoft.ContainerRegistry/registries/Horondi"}'
          action: 'Push an image'
      - task: AzureWebAppContainer@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
          appName: 'horondi-back'
          containers: 'horondi.azurecr.io/ita-social-projects/horondi_client_be:$(Build.BuildId)'

      - task: AzureWebAppContainer@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          azureSubscription: 'Visual Studio Enterprise – MPN (734fc759-c3a2-4e22-a478-301dc5b10496)'
          appName: 'horondi-back-staging'
          containers: 'horondistaging.azurecr.io/ita-social-projects/horondi_client_be:$(Build.BuildId)'

        